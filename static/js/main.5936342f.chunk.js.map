{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactsList/ContactsList.module.css","redux/actions.js","redux/selectors.js","components/FormContact/FormContact.js","components/Filter/Filter.js","components/ContactsList/ContactListItem/ContactListItem.js","components/ContactsList/ContactsList.js","components/App/App.js","redux/reducer.js","redux/store.js","index.js","components/FormContact/FormContact.module.css","components/ContactsList/ContactListItem/ContactListItem.module.css"],"names":["module","exports","conractsActions","addContact","createAction","name","number","payload","id","uuidv4","changeFilter","deleteContact","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","text","toLowerCase","includes","getFilterContacts","ContactForm","useState","setName","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","reset","className","s","form","onSubmit","preventDefault","find","contact","alert","contactsActions","label","input","type","pattern","onChange","title","required","button","btnText","size","color","Filter","filterLabel","filterInput","target","ContactListItem","contactName","contactNumber","onClickDeleteContact","listItem","listItemText","onClick","ContactList","list","map","onDeleteContact","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5936342f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__dORgV\",\"filterInput\":\"Filter_filterInput__2DdvO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__3isWH\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst addContact = createAction(\"contacts/add\", (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\nconst deleteContact = createAction(\"contacts/delete\");\r\n\r\nconst conractsActions = { addContact, changeFilter, deleteContact };\r\nexport default conractsActions;\r\n","export const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  const getFilterContacts = (contacts) => {\r\n    return contacts.filter((text) =>\r\n      text.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  };\r\n\r\n  return getFilterContacts(contacts);\r\n};\r\n","import React, { useState } from \"react\";\nimport s from \"./FormContact.module.css\";\nimport PropTypes from \"prop-types\";\nimport { AiOutlineUserAdd } from \"react-icons/ai\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport contactsActions from \"../../redux/actions\";\nimport { getContacts } from \"../../redux/selectors\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (name === \"\") {\n      alert(`Введите, пожалуйста, имя контакта.`);\n      return;\n    }\n\n    if (number === \"\") {\n      alert(`Введите, пожалуйста, номер телефона контакта.`);\n      return;\n    }\n\n    if (contacts.find((contact) => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      reset();\n      return;\n    }\n\n    dispatch(contactsActions.addContact(name, number));\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          value={name}\n          onChange={handleChange}\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          value={number}\n          onChange={handleChange}\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        <span className={s.btnText}>Add contact</span>\n        <AiOutlineUserAdd size=\"20px\" color=\"rgb(130, 27, 112)\" />\n      </button>\n    </form>\n  );\n}\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getFilter } from \"../../redux/selectors\";\nimport contactsActions from \"../../redux/actions\";\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.filterLabel}>\n      Find contacts by name\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        value={value}\n        onChange={(e) => dispatch(contactsActions.changeFilter(e.target.value))}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import s from \"./ContactListItem.module.css\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { AiOutlineUserDelete } from \"react-icons/ai\";\n\nconst ContactListItem = ({\n  contactName,\n  contactNumber,\n  onClickDeleteContact,\n}) => {\n  return (\n    <li className={s.listItem}>\n      <span className={s.listItemText}>{contactName}:</span>\n      <span className={s.listItemText}>{contactNumber}</span>\n      <button className={s.button} type=\"button\" onClick={onClickDeleteContact}>\n        Delete <AiOutlineUserDelete size=\"15px\" />\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contactName: PropTypes.string.isRequired,\n  contactNumber: PropTypes.string.isRequired,\n  onClickDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import s from \"./ContactsList.module.css\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ContactListItem from \"./ContactListItem/ContactListItem\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport contactsActions from \"../../redux/actions\";\nimport { getVisibleContacts } from \"../../redux/selectors\";\n\n// const ContactList = ({ contacts, onDeleteContact }) => (\n//   <ul className={s.list}>\n//     {contacts.map(({ id, name, number }) => (\n//       <ContactListItem\n//         key={id}\n//         contactName={name}\n//         contactNumber={number}\n//         onClickDeleteContact={() => onDeleteContact(id)}\n//       />\n//     ))}\n//   </ul>\n// );\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = (id) => dispatch(contactsActions.deleteContact(id));\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          contactName={name}\n          contactNumber={number}\n          onClickDeleteContact={() => onDeleteContact(id)}\n        />\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport FormContact from \"../FormContact/FormContact\";\nimport Filter from \"../Filter/Filter\";\nimport ContactsList from \"../ContactsList/ContactsList\";\nimport \"./app.scss\";\n\nexport default function App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n\n      <FormContact />\n\n      <h2>Contants</h2>\n      <Filter />\n      <ContactsList />\n    </>\n  );\n}\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./actions\";\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport logger from \"redux-logger\";\r\nimport contactsReducer from \"./reducer\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst phonebookPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(phonebookPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FormContact_form__1TlAN\",\"label\":\"FormContact_label__3yq2G\",\"input\":\"FormContact_input__2en8y\",\"button\":\"FormContact_button__12JQP\",\"btnText\":\"FormContact_btnText__2hwLR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__3m--2\",\"listItemText\":\"ContactListItem_listItemText__1hL8M\",\"button\":\"ContactListItem_button___Dumd\"};"],"sourceRoot":""}